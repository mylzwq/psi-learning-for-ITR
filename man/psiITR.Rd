% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/psi_lin.R
\name{psiITR}
\alias{psiITR}
\title{psi-Learning in individulized treatment rule}
\usage{
psiITR(X,A,R,w0=NULL,tau=0.1,kappa=0.1,maxit=100,tol=1e-4,kernel='linear',sigma=NULL,res=FALSE)
}
\arguments{
\item{X}{\eqn{n} by \eqn{p} input matrix.}

\item{A}{a vector of n entries coded 1 and -1 for the treatment assignments.}

\item{R}{a vector of outcome variable, larger is more desirable.}

\item{w0}{Inital estimate for the coefficients from  \code{\link{psi_Init}} or can be provided by the user.}

\item{tau}{tuning parameter for the loss function in psi-Learn}

\item{kappa}{tunning parameter to control the complexity of the decision function.}

\item{maxit}{maximum iterations}

\item{tol}{tolerance error bound}

\item{kernel}{kernel function for psi-Learning, can be \code{'linear'} or \code{'rbf'} (radial basis kernel), default is \code{'linear'}.When \code{'rbf'} is specified, one can specify the \code{sigma} parameter for rbf kernel.}

\item{sigma}{when using the rbf kernel, the bandwidth parameter  for 'rbf' kernel, default is 0.5.}

\item{res}{Whether to estimate the residual as the outcome for interaction effect, default is FALSE}
}
\value{
It returns the estimated coefficients in the decision funcion and the fitted value
 \item{w}{the coefficent for the decision function, if in the linear case it is p-dimension and if in the rbf kernel case, it is n-dimension.}
 \item{bias}{the intercept in both the linear case and the kernel case.}
 \item{fit}{a vector of estimated values for \eqn{\hat{f(x)}} in training data, in the linear case it is \eqn{fit=bias+X*w}  and in the kernel case \eqn{fit=bias+K(X,X)w}.}
}
\description{
Given the tunning parameters return the psiLearning model to estimate the optimal ITR
}
\examples{
          n=100;p=5
          X=replicate(p,runif(n, min = -1, max = 1))
          A=2*rbinom(n, 1, 0.5)-1
          T=cbind(rep(1,n,1),X)\%*\%c(1,2,1,0.5,rep(0,1,p-3))
          T0=(cbind(rep(1,n,1),X)\%*\%c(0.54,-1.8,-1.8,rep(0,1,p-2)))*A
          R=as.vector(rnorm(n,mean=0,sd=1)+T+T0)
          w0.Linear=psi_Init(X,A,R,kernel='linear')
          psi_Linear<-psiITR(X,A,R,w0.Linear,tau=0.1,kappa=0.5,maxit=100,tol=1e-4,kernel='linear')
          w0.rbf=psi_Init(X,A,R,kernel='rbf')
          sigma=Sig_est(X,A)
          psi_rbf<-psiITR(X,A,R,w0.rbf,tau=0.1,kappa=0.1,maxit=100,tol=1e-4,kernel='rbf',sigma=sigma)
}
\seealso{
\code{\link{psi_Init}}
}
\author{
MingyangLiu <liux3941@umn.edu>
}
